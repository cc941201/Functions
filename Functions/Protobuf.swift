import Foundation

struct Protobuf {
    let parser: Parser
    func generate(_ url: URL) {
        var output = "// DO NOT EDIT. Generated by funcgen.\n"
        for file in parser.imports {
            output.append("import \"\(file)\";\n")
        }
        output.append("""
            syntax = "proto3";
            
            message Function {
                message A {
                    uint32 level = 1;
                    sint32 step = 2;
                }
                message Producer {
            
            """)
        for i in parser.argumentNumber.sorted() {
            output.append("        message A\(i) {\n")
            if i > 0 {
                for j in 1...i {
                    output.append("            A o\(j) = \(j);\n")
                }
            }
            output.append("        }\n")
        }
        output.append("        oneof producer {\n            Function function_raw = 1;\n")
        for (i, (name, type)) in parser.types.enumerated() {
            switch type {
            case .basic(backed: true):
                output.append("            \(name) \(name)_raw = \(i * 2 + 3);\n")
            case .basic(backed: false): break
            case .function(let functionType):
                output.append("            A\(functionType.argumentTypes.count + 1) \(name) = \(i * 2 + 3);\n")
            }
        }
        for (i, (name, type)) in parser.symbols.enumerated() {
            output.append("            A\(type.argumentTypes.count) \(name) = \(i * 2 + 2);\n")
        }
        output.append("""
                    }
                }
                repeated Producer steps = 1;
                A return_step = 2;
            }
            """)
        try! output.write(to: url, atomically: true, encoding: .utf8)
    }
}
